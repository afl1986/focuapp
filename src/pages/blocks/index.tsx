import { api } from '@/shared/utils/api'
import { Button, Drawer, Stepper } from '@mantine/core'
import { useDisclosure } from '@mantine/hooks'
import dayjs from 'dayjs'
import Head from 'next/head'
import { last, length, reduce } from 'ramda'
import { useMemo, useState } from 'react'

export default function Block() {
  const utils = api.useUtils()
  const addBlock = api.blocks.create.useMutation({
    async onSuccess() {
      await utils.blocks.getAll.invalidate()
    },
  })
  const blocks = api.blocks.getAll.useQuery()
  const [opened, { open, close }] = useDisclosure(false)
  const [active, setActive] = useState(1)
  const replaysTimeDiff = useMemo<Array<number>>(
    () => [0, 2, 10, 60, 60 * 5, 60 * 24, 60 * 24 * 5, 60 * 24 * 25],
    [],
  )

  const steps = useMemo(() => {
    return reduce(
      (acc, current) => {
        const lastReplay = (last(acc) as unknown as dayjs.Dayjs)?.add(
          replaysTimeDiff[length(acc)] as unknown as number,
          'minute',
        )
        if (current === 0) return acc
        return [...acc, lastReplay]
      },
      [dayjs()],
      replaysTimeDiff,
    )
  }, [replaysTimeDiff])

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Drawer
          opened={opened}
          position="right"
          onClose={close}
          title="Select start date"
        >
          <Stepper
            iconSize={25}
            active={active}
            // onStepClick={setActive}
            orientation="vertical"
            // size="sm"
          >
            {steps.map((step, idx) => {
              const date = step.format('D MMM, YYYY,H:MM')
              const firstRepeatText = 'First repetition after reading'
              return (
                <Stepper.Step
                  key={idx}
                  // label={idx ? `Repetition #${idx + 1}` : firstRepeatText}
                  // description={date}
                  label={date}
                />
              )
            })}
            {/* <Stepper.Step label="Step 1" description="Create an account" />
            <Stepper.Step label="Step 2" description="Verify email" />
            <Stepper.Step label="Step 3" description="Get full access" /> */}
          </Stepper>
        </Drawer>

        <Button onClick={open}>Add block</Button>
        <button
          onClick={async () => {
            try {
              await addBlock.mutateAsync({ text: 'yoyoy' })
            } catch (error) {
              console.log('error')
            }
          }}
        >
          add block
        </button>
        <div>
          {blocks &&
            blocks.data?.map(({ createdbyId, title, description, id }) => {
              return (
                <div
                  key={id}
                  className="row-auto my-4 flex w-auto min-w-min rounded-xl border-l-ring p-4 px-1 shadow-lg"
                >
                  <h2>{title}</h2>
                  <b>{createdbyId}</b>
                  <section>{description}</section>
                </div>
              )
            })}
        </div>
      </main>
    </>
  )
}

import Head from 'next/head'
import { useState } from 'react'

import { BlockList } from '@/features/blocks/containers/BlockList'
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/shared/components/ui/resizable'
import { TooltipProvider } from '@/shared/components/ui/tooltip'
import { cn } from '@/shared/lib'
import { api } from '@/shared/utils/api'
import { NavMenu } from '@/widgets/nav-menu'

const defaultLayout = [150, 440, 655]

const Block = () => {
  const blocks = api.blocks.getAll.useQuery()
  const [isCollapsed, setIsCollapsed] = useState(false)

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <TooltipProvider delayDuration={0}>
        <ResizablePanelGroup
          direction="horizontal"
          onLayout={(sizes: number[]) => {
            document.cookie = `react-resizable-panels:layout=${JSON.stringify(
              sizes,
            )}`
          }}
          className="h-full max-h-screen items-stretch"
        >
          <ResizablePanel
            defaultSize={defaultLayout[0]}
            collapsedSize={4}
            collapsible={true}
            minSize={15}
            maxSize={20}
            onCollapse={() => {
              setIsCollapsed(true)
              document.cookie = `react-resizable-panels:collapsed=${JSON.stringify(
                true,
              )}`
            }}
            onExpand={() => {
              setIsCollapsed(false)
              document.cookie = `react-resizable-panels:collapsed=${JSON.stringify(
                false,
              )}`
            }}
            className={cn(
              isCollapsed &&
                'min-w-[50px] transition-all duration-300 ease-in-out',
            )}
          >
            <NavMenu isCollapsed={isCollapsed} />
          </ResizablePanel>

          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={defaultLayout[1]} minSize={30}>
            {blocks?.data && <BlockList blocks={blocks?.data} />}
          </ResizablePanel>
          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={defaultLayout[2]}>
            {blocks?.data && <BlockList blocks={blocks?.data} />}
          </ResizablePanel>
        </ResizablePanelGroup>
      </TooltipProvider>
    </>
  )
}

export default Block
